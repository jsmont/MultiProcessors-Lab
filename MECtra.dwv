library IEEE;
use IEEE.std_logic_1164.all;

entity MECtra is
      port(
      	coche: in std_logic;
      	tiempo: in std_logic;
      	inic: out std_logic;
      	CP,CS: out std_logic;
      	reloj: in std_logic;
      	pcero: in std_logic
      );
end MECtra;

architecture comportamiento of MECtra is
type tipoestado is (PR,SE);
signal EST, P_EST:tipoestado;
signal llecoh, cohesp: std_logic;

function flanco_ascendiente(signal reloj: std_logic)
	return boolean is
begin
	return (reloj='1' and reloj'event);
end flanco_ascendiente;

begin

process(reloj,pcero) begin
	if pcero='1' then EST<=PR; cohesp <= '0';
	elsif flanco_ascendiente(reloj) then
		EST <= P_EST; cohesp <= llecoh;
	end if;
end process;

process(EST,coche,TIEMPO)begin
	P_EST<= EST;
	case EST is
		when PR => if coche ='1' then
			P_EST <= SE;
		end if;
		when SE => if TIEMPO ='1' then
			P_EST <= PR;
		end if;
		when others => P_EST <= PR;
	end case;
end process;      
	
process (EST, coche) begin
	inic<='0';
	case EST is
		when PR =>
			CP <= '1';
			CS <= '0';
			if coche='1' then
				INIC<='1';
			end if;
		when SE =>
			CP <= '0';
			CS <= '1';
		when others =>
			CP <= '1';
			CS <= '0';
	end case;
end process;

llegcoh: process (EST, coche, cohesp, TIEMPO) begin
	if (EST = PR and cohesp = '1' and TIEMPO = '1') then
		llecoh <= '0';
	elsif coche = '1' then
		llecoh <= '1';
	else
		llecoh <= cohesp;
	end if;
end process;

end comportamiento;