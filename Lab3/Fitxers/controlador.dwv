library IEEE;
use IEEE.STD_LOGIC_1164.all;

library LogicWorks;
use LogicWorks.debug.all;

   entity controlador_cache is
        generic (retardo: time := 4 ns);
        port (reloj, pcero: in STD_LOGIC;
               LES: in STD_LOGIC;
               PET: in STD_LOGIC;
               LISTO: out STD_LOGIC;
               
               AF: in STD_LOGIC;
               PED: out STD_LOGIC;
               PEET: out STD_LOGIC;
               PEV: out STD_LOGIC;
               val: out STD_LOGIC;
               
               MLES: out STD_LOGIC;
               MPET: out STD_LOGIC;
               MLISTO: in STD_LOGIC;
               muxL: out STD_LOGIC;
               muxE: out STD_LOGIC;
               muxO: out std_logic;
               
               BMLES: in std_logic;					
               BMPET: in std_logic;										
                             
               VEST: out std_logic_vector (3 downto 0);
               VESTO: out std_logic_vector (1 downto 0));
   end;
  
   architecture synth of controlador_cache is
   
      constant UNO : std_logic := '1';
      constant CERO : std_logic := '0';
      
      constant lectura : std_logic := '1';
      constant escritura : std_logic := '0';
      
      constant acierto : std_logic := '1';
      constant fallo : std_logic := '0';

      constant PETICION : std_logic := '1';
      constant NOPETICION : std_logic := '0';
                           
      type tipoestado is (DES, ESP1, ESP2, ESP3);
      signal estado, prxestado: tipoestado;
--      constant DES: integer := 0;
--      constant ESP1: integer := 1;
--      constant ESP2: integer := 2;
--      constant ESP3: integer := 3;

-- PROCESADOR
	    constant VESTDESO: std_logic_vector :="1000";	-- Estado DESO	
	    constant VESTESP1: std_logic_vector :="0100";	-- Estado ESP1	
	    constant VESTESP2: std_logic_vector :="0010";	-- Estado ESP2	
	    constant VESTESP3: std_logic_vector :="0001";	-- Estado ESP3	


      

      signal TPED: std_logic :='0';
      signal PEVP: std_logic :='0';
      signal TPEET: std_logic :='0';
      
      signal LISP: std_logic:='1';
      signal vaP: std_logic :='1';
      
-- OBSERVADOR
										-- Observacion externa del estado del Obs.
	constant VESTDESOB: std_logic_vector :="10";					-- Estado DESO
	constant VESTESPOB: std_logic_vector :="01";					-- Estado ESPO

	type tipoestadoO is (DESO, ESPO);						-- Estados del automata del observador
	signal estado_O, prxestado_O: tipoestadoO;					-- Registro de estado del observador

-- senyales temporales en el proceso de salida del observador, sin sincronizar con la se%XF1al de reloj,
-- correspondiente a PEVO
	signal PEVO: std_logic :='0';

-- observador: senyal para establecer el estado (listo y val)
	signal LISO: std_logic :='1';
	signal vaO: std_logic :='0';

-- multiplexores. Seleccion entre la salida del procesador o la salida del observador
	signal muxva: std_logic :='0';							-- seleccion de la senyal val
	signal muxEV: std_logic :='0';							-- seleccion de la senyal PEV
	signal muxLI: std_logic :='0';							-- selec. de la senyal LISTO del proc. u obs.
	signal TPEV: std_logic :='0';							-- se%senyal de salida del multiplexor muxEV

      
      
    function flanco_ascendente (signal reloj: std_logic) return boolean is
    variable flanco: boolean:= FALSE;
    begin
      flanco := (reloj = '1' and reloj'event);
    return (flanco);
    end flanco_ascendente;
      
   begin
   
--   val <= UNO;
   
-- PROCESADOR
-- state register
   estado_proc: process (reloj, pcero)
   begin
   
 -- anyadir codigo
 
 
   end process estado_proc;    
   
-- next state logic
   prox_estado_proc: process(estado, LES, PET, AF, MLISTO)
   begin

 -- anyadir codigo


   end process prox_estado_proc;
   
-- output logic
   logica_salida_proc: process(estado, LES, PET, AF, MLISTO)
   begin

 --anyadir codigo

   end process logica_salida_proc;
   

-- OBSERVADOR		
-- registro de estado del observador
	estado_obs: process (reloj, pcero)	
		begin	
			if (pcero = UNO) then	
				estado_O <= DESO after retardo;	
				VESTO <= VESTDESOB after retardo;
			elsif (flanco_ascendente(reloj)) then	
				estado_O <= prxestado_O after retardo;	
				case prxestado_O is
					when DESO => VESTO <= VESTDESOB after retardo;
					when ESPO => VESTO <= VESTESPOB after retardo;
				end case;		
			end if;						
	end process estado_obs;	

-- logica de proximo estado del observador	
	prox_estado_obs: process(estado_O, BMLES, BMPET, AF, MLISTO)
		begin		
			--if (pcero =CERO) then	
				case estado_O is	
					when DESO =>	
						 if (BMPET = PETICION and BMLES = escritura and AF = acierto) then
							prxestado_O <= ESPO after retardo;
						 else
						    prxestado_O <= DESO after retardo;
					     end if;	
					when ESPO =>	
						if MLISTO = UNO then
							prxestado_O <= DESO after retardo;
						else
							prxestado_O <= ESPO after retardo;
						end if;		
					when others => prxestado_O <= DESO after retardo; 
				end case;		
			--else
				--prxestado_O <= DESO after retardo;
			--end if; 
	end process prox_estado_obs;	
	
-- logica de salida del observador	
	logica_salida_obs: process(estado_O, BMLES, BMPET, AF, MLISTO)	
		begin	
			PEVO <= CERO;	
			vaO <= CERO;	
			--if (pcero = CERO) then	
				case estado_O is
					when DESO =>	
						if (BMPET = PETICION and BMLES = escritura and AF = acierto) then
						  LISO <= CERO after retardo;
						else
						  LISO <= UNO after retardo;
						end if;
					when ESPO =>	
						if MLISTO = UNO then 	
							LISO <= UNO after retardo;
							vaO <= CERO after retardo;
							PEVO <= UNO after retardo;
					    else
					        LISO <= CERO after retardo;
						end if;		
					when others => 	
						LISO <= CERO after retardo;
						vaO <= CERO after retardo;
						PEVO <= CERO after retardo;
				end case;	
			--else	
				--LISO <= UNO after retardo;
				--vaO <= CERO after retardo;
				--PEVO <= CERO after retardo;
			--end if;	
	end process logica_salida_obs;	
	
-- seleccion de las senyales del procesador o del observador
	muxva <= not PET;								-- modelado ideal 
	muxEV <= not PET;								-- la cache atiendo al procesador u observa
	muxLI <= not PET;								-- se utiliza la senyal PET como de concesion
	muxO <= not PET;								-- si PET activo los otros observan
																
	LISTO <= LISP after retardo when muxLI = CERO else				-- multiplexor muxLI
			LISO after retardo;		
	val <= vaP after retardo when muxva = CERO else					-- multiplexor muxva
			vaO after retardo;		
	TPEV <= PEVP after retardo when muxEV = CERO else				-- multiplexor muxEV
			PEVO after retardo;	




-- actualizacion de cache
   PED <= not (TPED and (not reloj)) after retardo;
   PEET <= not (TPEET and (not reloj)) after retardo; 
   PEV <= not (TPEV and (not reloj)) or pcero after retardo;
   
end;
