library ieee;							
use ieee.std_logic_1164.all;							
use ieee.numeric_std.all;							
							
	entity genemulDEAL is	
				generic (retardo: time := 4 ns);					
		port ( pcero: out std_logic;					
		LES1P: out std_logic;					                     -- Interface con el controlador de cache 1P
		PET1P: out std_logic;					
		LISTO1P: in std_logic;					
		DIR1P: out std_logic_vector (15 downto 0);					 -- Interface con modulo campos de cache 1P
		DATO1P: out std_logic_vector (7 downto 0);	
		DATOL1P: in std_logic_vector (7 downto 0);				     -- para comprobacion
		Conc1P: out std_logic;					                     -- Interface con el bus
							
		LES2P: out std_logic;					                     -- Interface con el controlador de cache 2P
		PET2P: out std_logic;					
		LISTO2P: in std_logic;					
		DIR2P: out std_logic_vector (15 downto 0);					 -- Interface con modulo campos de cache 2P
		DATO2P: out std_logic_vector (7 downto 0);
		DATOL2P: in std_logic_vector (7 downto 0);				     -- para comprobacion					
		Conc2P: out std_logic;					-- Interface con el bus
							
		reloj: in std_logic);					
	end;						
							
	architecture estimulos of genemulDEAL is	
		constant UNO : std_logic := '1';					
		constant CERO : std_logic := '0';					
							
		constant lectura : std_logic := '1';					
		constant escritura : std_logic := '0';					
							
		constant PETICION : std_logic := '1';					
		constant NOPETICION : std_logic := '0';					
							
		constant CONCESION : std_logic := '1';					
		constant NOCONCESION : std_logic := '0';					
							
		constant DIRA: std_logic_vector := x"0000";					
		constant DATA: std_logic_vector := x"AA";					
		constant DIRB: std_logic_vector := x"0010";					
		constant DATB: std_logic_vector := x"BB";					
		constant DIRF: std_logic_vector := x"FFFF";					
		constant DATF: std_logic_vector := x"FF";					
							
		constant periodo : time := 10 ns;					
							
		function flanco_ascendente (signal reloj: std_logic) return boolean is					
			variable flanco: boolean:= FALSE;				
			begin				
				flanco := (reloj = '1' and reloj'event);			
				return (flanco);			
		end flanco_ascendente;					
							
	begin						
	process 						
		begin					-- puesta a cero
			pcero <= UNO; 				-- procesador 1P
			LES1P <= lectura ;				
	--		PET1P <= PETICION;		
			PET1P <= NOPETICION;			
			DIR1P <= DIRF;				
			DATO1P <= DATF;				
	--		Conc1P <= CONCESION;				
			Conc1P <= NOCONCESION;	
													
			LES2P <= lectura ;				-- procesador 2P
			PET2P <= NOPETICION;				
			DIR2P <= DIRF;				
			DATO2P <= DATF;				
			Conc2P <= NOCONCESION;				
							
			wait until flanco_ascendente(reloj)and LISTO1P = UNO and LISTO2P = UNO;	  -- esperar a que las 2 caches esten libres 
			pcero <= CERO after retardo;				
			wait until flanco_ascendente(reloj)and LISTO1P = UNO and LISTO2P = UNO;				
										
							
			LES1P <= escritura after retardo;				-- proc. 1P accede
			PET1P <= PETICION after retardo;				-- escritura en direccion DIRA del dato '01'
			DIR1P <= DIRA after retardo;				-- fallo de escritura
			DATO1P <= x"01" after retardo;				
			Conc1P <= CONCESION after retardo;				
							
			LES2P <= lectura after retardo;				-- proc. 2P observa
			PET2P <= NOPETICION after retardo;				
			DIR2P <= DIRF after retardo;				-- fallo en observacion
			DATO2P <= DATF after retardo;				
			Conc2P <= NOCONCESION after retardo;				
							
							-- esperar a que las 2 caches esten libres
			wait until flanco_ascendente(reloj) and LISTO1P = UNO and LISTO2P = UNO;				
							
			LES1P <= lectura after retardo;				-- proc. 1P observa
			PET1P <= NOPETICION after retardo;				
			DIR1P <= DIRF after retardo;				-- fallo de observacion
			DATO1P <= DATF after retardo;				
			Conc1P <= NOCONCESION after retardo;				
							
			LES2P <= lectura after retardo;				-- proc. 2P accede
			PET2P <= PETICION after retardo;				-- lectura en direccion DIRA
			DIR2P <= DIRA after retardo;				-- fallo de lectura
			DATO2P <= x"01" after retardo;				
			Conc2P <= CONCESION after retardo;				
							
							-- esperar a que las 2 caches esten libres
			wait until flanco_ascendente(reloj) and LISTO1P = UNO and LISTO2P = UNO;				
							
			LES1P <= escritura after retardo;				-- proc. 1P accede
			PET1P <= PETICION after retardo;				-- escritura en direccion DIRA 
			DIR1P <= DIRA after retardo;				-- fallo de escritura
			DATO1P <= x"02" after retardo;				
			Conc1P <= CONCESION after retardo;				
							
			LES2P <= lectura after retardo;				-- proc. 2P observa
			PET2P <= NOPETICION after retardo;				
			DIR2P <= DIRF after retardo;				-- acierto en observacion, siendo una escritura
			DATO2P <= DATF after retardo;				
			Conc2P <= NOCONCESION after retardo;				
							
							-- esperar a que las 2 caches esten libres
			wait until flanco_ascendente(reloj) and LISTO1P = UNO and LISTO2P = UNO;				
							
			LES1P <= lectura after retardo;				-- proc. 1P observa
			PET1P <= NOPETICION after retardo;				
			DIR1P <= DIRF after retardo;				-- fallo de observacion
			DATO1P <= DATF after retardo;				
			Conc1P <= NOCONCESION after retardo;				
							
			LES2P <= lectura after retardo;				-- proc. 2P accede
			PET2P <= PETICION after retardo;				-- lectura en direccion DIRA
			DIR2P <= DIRA after retardo;				-- acierto de lectura
			DATO2P <= x"20" after retardo;				
			Conc2P <= CONCESION after retardo;				
							
							-- esperar a que las 2 caches esten libres
			wait until flanco_ascendente(reloj) and LISTO1P = UNO and LISTO2P = UNO;				
							
			LES1P <= lectura after retardo;				-- proc. 1P observa
			PET1P <= NOPETICION after retardo;				
			DIR1P <= DIRF after retardo;				-- fallo de observacion
			DATO1P <= DATF after retardo;				
			Conc1P <= NOCONCESION after retardo;				
							
			LES2P <= lectura after retardo;				-- proc. 2P observa
			PET2P <= NOPETICION after retardo;				
			DIR2P <= DIRA after retardo;				
			DATO2P <= DATF after retardo;				
			Conc2P <= NOCONCESION after retardo;				
							
							-- esperar 1 ciclo
			wait until flanco_ascendente (reloj) and LISTO1P = UNO and LISTO2P = UNO;
			
			... 
							
	end process;						
end;							
