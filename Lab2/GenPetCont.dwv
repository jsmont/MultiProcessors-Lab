library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity genpruecontpet is
generic (retardo: time := 2 ns);

port ( pcero: out std_logic;
	LES: out std_logic;	-- Interface con el controlador de cache
	PET: out std_logic;
	LISTO: in std_logic;
	AF: out std_logic;	-- respuesta de modulo campos
	MLISTO: out std_logic;	-- respuesta de memoria
	reloj: in std_logic);
end;

architecture estimulos of genpruecontpet is
	constant UNO : std_logic := '1';
	constant CERO : std_logic := '0';
	constant lectura: std_logic := '1';
	constant escritura : std_logic := '0';
	constant PETICION : std_logic := '1';
	constant NOPETICION : std_logic := '0';
	constant ACIERTO : std_logic := '1';
	constant FALLO : std_logic := '0';

	function flanco_ascendente (signal reloj: std_logic) return boolean is
		variable flanco: boolean:= FALSE;
	begin
		flanco := (reloj = '1' and reloj'event);
		return (flanco);
	end flanco_ascendente;

begin

process
begin
	pcero <= UNO;	-- puesta a cero
	LES <= lectura;
	PET <= NOPETICION;	-- no hay peticion
	AF <= ACIERTO;
	MLISTO <= CERO;
	wait until flanco_ascendente(reloj);	-- esperar 1 ciclo
	pcero <= CERO after retardo;	-- final de puesta a cero
	wait until flanco_ascendente(reloj);	-- esperar 2 ciclo
	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este preparada

	LES <= escritura after retardo;	-- escritura
	PET <= PETICION after retardo;
	AF <= FALLO after retardo;	-- fallo de escritura
	wait until flanco_ascendente(reloj);	-- esperar a memoria
	wait until flanco_ascendente(reloj);
	MLISTO <= UNO after retardo;	-- finaliza acceso a memoria
	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este preparada

	MLISTO <= CERO after retardo;
	LES <= lectura after retardo;	-- lectura
	PET<= PETICION after retardo;
	AF <= FALLO after retardo;	-- fallo de lectura
	wait until flanco_ascendente(reloj);	-- esperar a memoria
	wait until flanco_ascendente(reloj);
	MLISTO <= UNO after retardo;	-- finaliza acceso a memoria
	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre

	MLISTO <= CERO after retardo;
	LES <= escritura after retardo;	-- lectura
	PET <= PETICION after retardo;
	AF <= ACIERTO after retardo;	-- acierto de lectura
	wait until flanco_ascendente(reloj);	-- esperar a memoria
	wait until flanco_ascendente(reloj);
	MLISTO <= UNO after retardo;	-- finaliza acceso a memoria
	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre

	MLISTO <= CERO after retardo;
	--...

end process;

end;
