library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
entity pruebacontrolador is
generic (retardo: time := 2 ns);

port ( pcero: out std_logic;
	LES: out std_logic;-- Interface con el controlador de cache
	PET: out std_logic;
	LISTO: in std_logic;
	DIR: out std_logic_vector (15 downto 0);	-- Interface con modulo campos
	DATO: out std_logic_vector (7 downto 0);
	DATOL: out std_logic_vector (7 downto 0);	-- puede utilizarse para comprobar el dato leido
	reloj: in std_logic);
end;

architecture estimulos of pruebacontrolador is
	constant UNO : std_logic := '1';
	constant CERO : std_logic := '0';
	constant lectura: std_logic := '1';
	constant escritura : std_logic := '0';
	constant PETICION : std_logic := '1';
	constant NOPETICION : std_logic := '0';
	constant DIRA: std_logic_vector := x"0000";
	constant DATA: std_logic_vector := x"AA";
	constant DIRB: std_logic_vector := x"0010";
	constant DATB: std_logic_vector := x"BB";
	constant periodo : time := 10 ns;

	function flanco_ascendente (signal reloj: std_logic) return boolean is
		variable flanco: boolean:= FALSE;
	begin
		flanco := (reloj = '1' and reloj’event);
		return (flanco);
	end flanco_ascendente;

begin

process
begin
	pcero <= UNO after retardo;	-- puesta a cero
	LES <= lectura after retardo;
	PET <= NOPETICION after retardo;
	DIR <= x"FFFF";
	DATO <=X"FF";---"X" o "x" ¿?

	wait until flanco_ascendente(reloj);	-- esperar 2 ciclos
	wait until flanco_ascendente(reloj);
	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre

	pcero <= CERO after retardo;	-- finaliza la puesta a cero
	LES <= escritura after retardo;	-- escritura en direccion DIRA del dato DATA
	PET <= PETICION after retardo;	-- fallo de escritura
	DIR <= DIRA after retardo;
	DATO <= DATA after retardo;

	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre
	LES <= lectura after retardo;	-- lectura en direccion DIRA
	PET<= PETICION after retardo;	-- fallo de lectura
	DIR <= DIRA after retardo;

	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre
	LES <= escritura after retardo;	-- escritura en direccion DIRA del dato DATB
	PET <= PETICION after retardo;	-- acierto de escritura
	DIR <= DIRA after retardo;
	DATO <= DATB after retardo;

	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre
	LES <= lectura after retardo;	-- lectura en direccion DIRA
	PET <= PETICION after retardo;	-- acierto de lectura
	DIR <= DIRA after retardo;

	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre
	DIR <= x"FFFF" after retardo;--- DIR_set abans de PET i LES ¿?
	PET <= NOPETICION after retardo;
	LES <= lectura after retardo;

	wait until flanco_ascendente(reloj) and LISTO = UNO;	-- esperar a que la cache este libre
	--...

end process;

end;
