library IEEE;
use IEEE.STD_LOGIC_1164.all;

library LogicWorks;
use LogicWorks.debug.all;

   entity controlador_cache is
        generic (retardo: time := 4 ns);
        port (reloj, pcero: in STD_LOGIC;
               
               LES: in STD_LOGIC;
               PET: in STD_LOGIC; 
               
               MLISTO: in STD_LOGIC;
               AF: in STD_LOGIC;
               
               PED: out STD_LOGIC;
               PEET: out STD_LOGIC;
               PEV: out STD_LOGIC;
               
               val: out STD_LOGIC;
               
               MLES: out STD_LOGIC;
               MPET: out STD_LOGIC;
               
               LISTO: out STD_LOGIC;
               
               muxL: out STD_LOGIC;
               muxE: out STD_LOGIC;
               
               VEST: out std_logic_vector (3 downto 0));
   end;
  
   architecture synth of controlador_cache is
   
      constant SI : std_logic := '1';
      constant NO : std_logic := '0';
      
      constant lectura : std_logic := '1';      
      constant escritura : std_logic := '0';
      
      constant acierto : std_logic := '1';      
      constant fallo : std_logic := '0';

      constant PETICION : std_logic := '1';      
      constant NOPETICION : std_logic := '0';
                           
      type tipoestado is (DES, ESP1, ESP2, ESP3);
      signal estado, prxestado: tipoestado := DES;

	  constant VESTDESO: std_logic_vector := "1000";	-- Estado DESO	
	  constant VESTESP1: std_logic_vector := "0100";	-- Estado ESP1	
	  constant VESTESP2: std_logic_vector := "0010";	-- Estado ESP2	
	  constant VESTESP3: std_logic_vector := "0001";	-- Estado ESP3	


      

      signal TPED: std_logic :='1';
      signal TPEV: std_logic :='1';
      signal TPEET: std_logic :='1';
      
    function flanco_ascendente (signal reloj: std_logic) return boolean is
    variable flanco: boolean:= FALSE;
    begin
      flanco := (reloj = '1' and reloj'event);
    return (flanco);
    end flanco_ascendente;      
      
    begin
   
	-- registro de estado
	estado <= prxestado when flanco_ascendente(reloj)
		else estado;
	
	PROCESS (estado, pcero)
	BEGIN
		IF pcero = SI THEN
			VEST <= VESTDESO;
		ELSE
			CASE estado IS
				WHEN DES => VEST <= VESTDESO AFTER retardo;
				WHEN ESP1 => VEST <= VESTESP1 AFTER retardo;
				WHEN ESP2 => VEST <= VESTESP2 AFTER retardo;
				WHEN ESP3 => VEST <= VESTESP3 AFTER retardo;
			END CASE;
		END IF;
	END PROCESS;

	-- logica de proximo estado
	PROCESS(reloj, estado, LES, PET, AF, MLISTO, pcero)
	BEGIN
		prxestado <= estado;
		IF pcero = SI THEN
			prxestado <= DES AFTER retardo;
		ELSE
			CASE estado IS
				WHEN DES =>
					IF PET = SI THEN
						IF AF = fallo AND LES = escritura THEN prxestado <= ESP3;
						ELSIF AF = fallo AND LES = lectura THEN prxestado <= ESP1;
						ELSIF AF = acierto AND LES = escritura THEN prxestado <= ESP2;
						END IF;
					END IF;
				WHEN ESP1 | ESP2 | ESP3 =>
					IF MLISTO = SI THEN prxestado <= DES; END IF;
			END CASE;
		END IF;
	END PROCESS;

	-- logica de salida
	PROCESS(estado, LES, PET, AF, MLISTO, pcero)
	BEGIN
		val <= SI AFTER retardo;
		MLES <= LES AFTER retardo;
		CASE estado IS
			WHEN DES =>
				TPED <= NO;
				TPEET <= NO;
				TPEV <= NO;
				MPET <= NOPETICION AFTER retardo;
				muxL <= NO AFTER retardo;
				IF PET = NOPETICION THEN
					LISTO <= SI AFTER retardo;
				ELSE
					IF LES = lectura AND AF = acierto THEN LISTO <= SI AFTER retardo;
					ELSE LISTO <= NO AFTER retardo;
					END IF;
				END IF;
				
			WHEN ESP1 =>
				LISTO <= MLISTO AFTER retardo;
				MPET <= PETICION AFTER retardo;
				TPED <= MLISTO;
				TPEET <= MLISTO;
				TPEV <= MLISTO;
				muxL <= SI AFTER retardo;
				muxE <= SI AFTER retardo;
			WHEN ESP2 =>
				LISTO <= MLISTO AFTER retardo;
				MPET <= PETICION AFTER retardo; -- Solalmente hay que cambiar el dato
				TPEV <= NO;
				TPEET <= NO;
				TPED <= MLISTO;
				muxE <= NO AFTER retardo;
			WHEN ESP3 =>
				LISTO <= MLISTO AFTER retardo;
				MPET <= PETICION AFTER retardo; -- No se escribe en cache
				TPEV <= NO;
				TPEET <= NO;
				TPED <= NO;
		END CASE;
	END PROCESS;

	-- actualizacion de cache
   PED <= NOT (TPED AND (NOT reloj)) AFTER retardo;
   PEET <= NOT (TPEET AND (NOT reloj)) AFTER retardo; 
   PEV <= NOT (TPEV AND (NOT reloj)) AFTER retardo;
   
END;
