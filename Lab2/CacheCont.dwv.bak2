--while (true) {
--	while (PET = NO) { };
--	if (AF = acierto and LES = lectura) then
--		LISTO = SI;
--		muxL = contenedor;
--	else
--		MPET = peticion a memoria;
--		MLES = LES;
--		while (MLISTO = NO) { };
--		if (LES = lectura) then
--			muxE = memoria;
--			muxL = memoria;
--			PED = escribir campo datos;
--			PEV = escribir estado;
--			PEET = escribir etiquetas;
--		else if (AF = acierto and LES = escritura) then
--			muxE = procesador;
--			PED = escribir campo datos;
--		end if
--	end if
--}

library ieee;
use ieee.std_logic_1164.all;
entity controlador is
generic (retardo: time := 4 ns);

port (reloj, pcero: in std_logic; -- Pcero señal de puesta a cero
LES: in std_logic; -- Interface con el procesador
PET: in std_logic;
LISTO: out std_logic;

AF: in std_logic; -- Interface con módulo campos
PED: out std_logic; -- y elementos periféricos
PEET: out std_logic;
PEV: out std_logic;
val: out std_logic;
muxL: out std_logic;
muxE: out std_logic;

MLES: out std_logic; -- Interface con memoria
MPET: out std_logic;
MLISTO: in std_logic;

VEST: out std_logic_vector (3 downto 0)); -- Observación externa del estado
end;

architecture comportamiento of controlador is
constant UNO : std_logic := '1'; -- Constantes para establecer
constant CERO : std_logic := '0'; -- y comprobar valores
constant lectura : std_logic := '1';
constant escritura : std_logic := '0';
constant acierto : std_logic := '1';
constant fallo : std_logic := '0';
constant PETICION : std_logic := '1';
constant NOPETICION : std_logic := '0';                     
-- signal cambioest, est: std_logic;	--REGISTRO

-- observación externa del estado
constant VESTDESO: std_logic_vector :="1000"; -- Estado DESO
constant VESTESP1: std_logic_vector :="0100"; -- Estado ESP1
constant VESTESP2: std_logic_vector :="0010"; -- Estado ESP2
constant VESTESP3: std_logic_vector :="0001"; -- Estado ESP3
type tipoestado is (DES, ESP1, ESP2, ESP3); -- Estados
signal estado, prxestado: tipoestado; -- Registro de estado

-- señales temporales en el proceso de salida, sin sincronizar con la señal de reloj,
-- correspondientes a las PED, PEV y PEET
signal TPED: std_logic :='1';
signal TPEV: std_logic :='1';
signal TPEET: std_logic :='1';

-- deteccion de flanco ascendente
function flanco_ascendente (signal reloj: std_logic) return boolean is
variable flanco: boolean:= FALSE;
begin
flanco := (reloj = '1' and reloj'event);
return (flanco);
end flanco_ascendente;
begin

-- registro de estado
process (reloj, pcero)
begin
	if pcero = UNO then
		-- estado <= DES;
		VEST <= VESTDESO;
	elsif (flanco_ascendente(reloj)) then
		-- estado <= prxestado;
		case prxestado is
			when DES => VEST <= VESTDESO after retardo;
			when ESP1 => VEST <= VESTESP1 after retardo;
			when ESP2 => VEST <= VESTESP2 after retardo;
			when ESP3 => VEST <= VESTESP3 after retardo;
		end case;
	end if;
end process;

-- logica de proximo estado
process(estado, LES, PET, AF, MLISTO, pcero)
begin
	-- prxestado <= estado;  --after retardo¿?
	if (pcero = CERO) then
		case estado is
			when DES =>
				-- if (PET='0' or ( AF='1' and LES='1')) then estado <= DES;  --after retardo¿?
				-- else if (AF='0' and LES='1') then estado <= ESP1;  --after retardo¿?
				-- else if (AF='1' and LES='0') then estado <= ESP2;  --after retardo¿?
				-- else estado <= ESP3;	-- else if (AF='0' and LES='0') then ¿?  --after retardo¿?
			when ESP1 | ESP2 | ESP3 =>
				-- if ( MLISTO='1' ) then prxestado <= DES;  --after retardo¿?
				-- else estado <= estado; --necessari actualitzar ¿?  --after retardo¿?
		end case;
	else
	prxestado <= DES after retardo;
	end if;
end process;

-- logica de salida
process(estado, LES, PET, AF, MLISTO, pcero)
begin
	val <= UNO after retardo;
	--...
	if (pcero = CERO) then
		--case estado is
		--	when DESO =>
		--	--...
		--	when ESP1 =>
		--	--...
		--	when ESP2 =>
		--	--...
		--	when ESP3 =>
		--	--...
		--	when others =>
		--	--...
		--end case;

-- SENSE CASE
		--MPET <= '1' when (estado = DES and PET = '1' and AF = '0' or LES = '0') else '0';
		--MLES <= LES; --necessari ¿?
				
		--PEET <= (estado = ESP1 and MLISTO = '1') else '0';
		--PEV <= (estado = ESP1 and MLISTO = '1') else '0';
		--PED <= (estado = ESP1 or estado = ESP2 and MLISTO = '1') else '0';
		--val <= ¿?
		
		-- LISTO <= MLISTO; --necessari ¿?

-- if (PET = '1') === if PET  -  en senyals d'1 bit ¿?  => escurssar expressions

	else
	--MPET <='0';
	--MLES <=LES;
	--PEET <='0';
	--PEV <='0';
	--PED <='0';
	--val <='0';
	end if
end process;

-- actualizacion de cache
PED <= not (TPED and (not (reloj) );
PEET <= -- not (TPEET and (not (reloj) );
PEV <= -- not (TPEV and (not (reloj) );
end;